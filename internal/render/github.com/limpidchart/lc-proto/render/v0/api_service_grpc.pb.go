// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package render

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChartAPIClient is the client API for ChartAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartAPIClient interface {
	// Create chart and return its raw bytes representation with additional metadata.
	CreateChart(ctx context.Context, in *CreateChartRequest, opts ...grpc.CallOption) (*ChartReply, error)
	// Get a created chart raw bytes representation with additional metadata.
	GetChart(ctx context.Context, in *GetChartRequest, opts ...grpc.CallOption) (*ChartReply, error)
}

type chartAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChartAPIClient(cc grpc.ClientConnInterface) ChartAPIClient {
	return &chartAPIClient{cc}
}

func (c *chartAPIClient) CreateChart(ctx context.Context, in *CreateChartRequest, opts ...grpc.CallOption) (*ChartReply, error) {
	out := new(ChartReply)
	err := c.cc.Invoke(ctx, "/render.ChartAPI/CreateChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartAPIClient) GetChart(ctx context.Context, in *GetChartRequest, opts ...grpc.CallOption) (*ChartReply, error) {
	out := new(ChartReply)
	err := c.cc.Invoke(ctx, "/render.ChartAPI/GetChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartAPIServer is the server API for ChartAPI service.
// All implementations must embed UnimplementedChartAPIServer
// for forward compatibility
type ChartAPIServer interface {
	// Create chart and return its raw bytes representation with additional metadata.
	CreateChart(context.Context, *CreateChartRequest) (*ChartReply, error)
	// Get a created chart raw bytes representation with additional metadata.
	GetChart(context.Context, *GetChartRequest) (*ChartReply, error)
	mustEmbedUnimplementedChartAPIServer()
}

// UnimplementedChartAPIServer must be embedded to have forward compatible implementations.
type UnimplementedChartAPIServer struct {
}

func (UnimplementedChartAPIServer) CreateChart(context.Context, *CreateChartRequest) (*ChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChart not implemented")
}
func (UnimplementedChartAPIServer) GetChart(context.Context, *GetChartRequest) (*ChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChart not implemented")
}
func (UnimplementedChartAPIServer) mustEmbedUnimplementedChartAPIServer() {}

// UnsafeChartAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartAPIServer will
// result in compilation errors.
type UnsafeChartAPIServer interface {
	mustEmbedUnimplementedChartAPIServer()
}

func RegisterChartAPIServer(s grpc.ServiceRegistrar, srv ChartAPIServer) {
	s.RegisterService(&ChartAPI_ServiceDesc, srv)
}

func _ChartAPI_CreateChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartAPIServer).CreateChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/render.ChartAPI/CreateChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartAPIServer).CreateChart(ctx, req.(*CreateChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartAPI_GetChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartAPIServer).GetChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/render.ChartAPI/GetChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartAPIServer).GetChart(ctx, req.(*GetChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChartAPI_ServiceDesc is the grpc.ServiceDesc for ChartAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChartAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "render.ChartAPI",
	HandlerType: (*ChartAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChart",
			Handler:    _ChartAPI_CreateChart_Handler,
		},
		{
			MethodName: "GetChart",
			Handler:    _ChartAPI_GetChart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_service.proto",
}
