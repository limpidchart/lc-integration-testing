// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: chart.proto

package render

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChartSizes represents options to configure chart sizes.
type ChartSizes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chart width.
	Width *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=width,proto3" json:"width,omitempty"`
	// Chart height.
	Height *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ChartSizes) Reset() {
	*x = ChartSizes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chart_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSizes) ProtoMessage() {}

func (x *ChartSizes) ProtoReflect() protoreflect.Message {
	mi := &file_chart_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSizes.ProtoReflect.Descriptor instead.
func (*ChartSizes) Descriptor() ([]byte, []int) {
	return file_chart_proto_rawDescGZIP(), []int{0}
}

func (x *ChartSizes) GetWidth() *wrapperspb.Int32Value {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ChartSizes) GetHeight() *wrapperspb.Int32Value {
	if x != nil {
		return x.Height
	}
	return nil
}

// ChartMargins represents options to configure chart margins.
type ChartMargins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Top margin.
	MarginTop *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=margin_top,json=marginTop,proto3" json:"margin_top,omitempty"`
	// Bottom margin.
	MarginBottom *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=margin_bottom,json=marginBottom,proto3" json:"margin_bottom,omitempty"`
	// Left margin.
	MarginLeft *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=margin_left,json=marginLeft,proto3" json:"margin_left,omitempty"`
	// Right margin.
	MarginRight *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=margin_right,json=marginRight,proto3" json:"margin_right,omitempty"`
}

func (x *ChartMargins) Reset() {
	*x = ChartMargins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chart_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartMargins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartMargins) ProtoMessage() {}

func (x *ChartMargins) ProtoReflect() protoreflect.Message {
	mi := &file_chart_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartMargins.ProtoReflect.Descriptor instead.
func (*ChartMargins) Descriptor() ([]byte, []int) {
	return file_chart_proto_rawDescGZIP(), []int{1}
}

func (x *ChartMargins) GetMarginTop() *wrapperspb.Int32Value {
	if x != nil {
		return x.MarginTop
	}
	return nil
}

func (x *ChartMargins) GetMarginBottom() *wrapperspb.Int32Value {
	if x != nil {
		return x.MarginBottom
	}
	return nil
}

func (x *ChartMargins) GetMarginLeft() *wrapperspb.Int32Value {
	if x != nil {
		return x.MarginLeft
	}
	return nil
}

func (x *ChartMargins) GetMarginRight() *wrapperspb.Int32Value {
	if x != nil {
		return x.MarginRight
	}
	return nil
}

// ChartAxes represents options to configure chart axes.
type ChartAxes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configured scale for top axis.
	AxisTop *ChartScale `protobuf:"bytes,1,opt,name=axis_top,json=axisTop,proto3" json:"axis_top,omitempty"`
	// Label for top axis.
	AxisTopLabel string `protobuf:"bytes,2,opt,name=axis_top_label,json=axisTopLabel,proto3" json:"axis_top_label,omitempty"`
	// Configured scale for bottom axis.
	AxisBottom *ChartScale `protobuf:"bytes,3,opt,name=axis_bottom,json=axisBottom,proto3" json:"axis_bottom,omitempty"`
	// Label for bottom axis.
	AxisBottomLabel string `protobuf:"bytes,4,opt,name=axis_bottom_label,json=axisBottomLabel,proto3" json:"axis_bottom_label,omitempty"`
	// Configured scale for left axis.
	AxisLeft *ChartScale `protobuf:"bytes,5,opt,name=axis_left,json=axisLeft,proto3" json:"axis_left,omitempty"`
	// Label for left axis.
	AxisLeftLabel string `protobuf:"bytes,6,opt,name=axis_left_label,json=axisLeftLabel,proto3" json:"axis_left_label,omitempty"`
	// Configured scale for right axis.
	AxisRight *ChartScale `protobuf:"bytes,7,opt,name=axis_right,json=axisRight,proto3" json:"axis_right,omitempty"`
	// Label for right axis.
	AxisRightLabel string `protobuf:"bytes,8,opt,name=axis_right_label,json=axisRightLabel,proto3" json:"axis_right_label,omitempty"`
}

func (x *ChartAxes) Reset() {
	*x = ChartAxes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chart_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartAxes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartAxes) ProtoMessage() {}

func (x *ChartAxes) ProtoReflect() protoreflect.Message {
	mi := &file_chart_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartAxes.ProtoReflect.Descriptor instead.
func (*ChartAxes) Descriptor() ([]byte, []int) {
	return file_chart_proto_rawDescGZIP(), []int{2}
}

func (x *ChartAxes) GetAxisTop() *ChartScale {
	if x != nil {
		return x.AxisTop
	}
	return nil
}

func (x *ChartAxes) GetAxisTopLabel() string {
	if x != nil {
		return x.AxisTopLabel
	}
	return ""
}

func (x *ChartAxes) GetAxisBottom() *ChartScale {
	if x != nil {
		return x.AxisBottom
	}
	return nil
}

func (x *ChartAxes) GetAxisBottomLabel() string {
	if x != nil {
		return x.AxisBottomLabel
	}
	return ""
}

func (x *ChartAxes) GetAxisLeft() *ChartScale {
	if x != nil {
		return x.AxisLeft
	}
	return nil
}

func (x *ChartAxes) GetAxisLeftLabel() string {
	if x != nil {
		return x.AxisLeftLabel
	}
	return ""
}

func (x *ChartAxes) GetAxisRight() *ChartScale {
	if x != nil {
		return x.AxisRight
	}
	return nil
}

func (x *ChartAxes) GetAxisRightLabel() string {
	if x != nil {
		return x.AxisRightLabel
	}
	return ""
}

var File_chart_proto protoreflect.FileDescriptor

var file_chart_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x74, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x54, 0x6f, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf7, 0x02, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41,
	0x78, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x78, 0x69, 0x73, 0x54,
	0x6f, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x78, 0x69, 0x73,
	0x54, 0x6f, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x78, 0x69, 0x73,
	0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x52, 0x0a, 0x61, 0x78, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x78, 0x69, 0x73, 0x42, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x78, 0x69,
	0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x52, 0x08, 0x61, 0x78, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x78,
	0x69, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x78, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x78, 0x69, 0x73,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x78, 0x69, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69,
	0x6d, 0x70, 0x69, 0x64, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2f, 0x6c, 0x63, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x30, 0x3b, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chart_proto_rawDescOnce sync.Once
	file_chart_proto_rawDescData = file_chart_proto_rawDesc
)

func file_chart_proto_rawDescGZIP() []byte {
	file_chart_proto_rawDescOnce.Do(func() {
		file_chart_proto_rawDescData = protoimpl.X.CompressGZIP(file_chart_proto_rawDescData)
	})
	return file_chart_proto_rawDescData
}

var file_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_chart_proto_goTypes = []interface{}{
	(*ChartSizes)(nil),            // 0: render.ChartSizes
	(*ChartMargins)(nil),          // 1: render.ChartMargins
	(*ChartAxes)(nil),             // 2: render.ChartAxes
	(*wrapperspb.Int32Value)(nil), // 3: google.protobuf.Int32Value
	(*ChartScale)(nil),            // 4: render.ChartScale
}
var file_chart_proto_depIdxs = []int32{
	3,  // 0: render.ChartSizes.width:type_name -> google.protobuf.Int32Value
	3,  // 1: render.ChartSizes.height:type_name -> google.protobuf.Int32Value
	3,  // 2: render.ChartMargins.margin_top:type_name -> google.protobuf.Int32Value
	3,  // 3: render.ChartMargins.margin_bottom:type_name -> google.protobuf.Int32Value
	3,  // 4: render.ChartMargins.margin_left:type_name -> google.protobuf.Int32Value
	3,  // 5: render.ChartMargins.margin_right:type_name -> google.protobuf.Int32Value
	4,  // 6: render.ChartAxes.axis_top:type_name -> render.ChartScale
	4,  // 7: render.ChartAxes.axis_bottom:type_name -> render.ChartScale
	4,  // 8: render.ChartAxes.axis_left:type_name -> render.ChartScale
	4,  // 9: render.ChartAxes.axis_right:type_name -> render.ChartScale
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chart_proto_init() }
func file_chart_proto_init() {
	if File_chart_proto != nil {
		return
	}
	file_scale_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chart_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSizes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chart_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartMargins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chart_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartAxes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chart_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chart_proto_goTypes,
		DependencyIndexes: file_chart_proto_depIdxs,
		MessageInfos:      file_chart_proto_msgTypes,
	}.Build()
	File_chart_proto = out.File
	file_chart_proto_rawDesc = nil
	file_chart_proto_goTypes = nil
	file_chart_proto_depIdxs = nil
}
