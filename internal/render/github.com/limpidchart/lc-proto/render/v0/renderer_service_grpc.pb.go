// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package render

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChartRendererClient is the client API for ChartRenderer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartRendererClient interface {
	// Render chart and return its raw bytes representation.
	RenderChart(ctx context.Context, in *RenderChartRequest, opts ...grpc.CallOption) (*RenderChartReply, error)
}

type chartRendererClient struct {
	cc grpc.ClientConnInterface
}

func NewChartRendererClient(cc grpc.ClientConnInterface) ChartRendererClient {
	return &chartRendererClient{cc}
}

func (c *chartRendererClient) RenderChart(ctx context.Context, in *RenderChartRequest, opts ...grpc.CallOption) (*RenderChartReply, error) {
	out := new(RenderChartReply)
	err := c.cc.Invoke(ctx, "/render.ChartRenderer/RenderChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartRendererServer is the server API for ChartRenderer service.
// All implementations must embed UnimplementedChartRendererServer
// for forward compatibility
type ChartRendererServer interface {
	// Render chart and return its raw bytes representation.
	RenderChart(context.Context, *RenderChartRequest) (*RenderChartReply, error)
	mustEmbedUnimplementedChartRendererServer()
}

// UnimplementedChartRendererServer must be embedded to have forward compatible implementations.
type UnimplementedChartRendererServer struct {
}

func (UnimplementedChartRendererServer) RenderChart(context.Context, *RenderChartRequest) (*RenderChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderChart not implemented")
}
func (UnimplementedChartRendererServer) mustEmbedUnimplementedChartRendererServer() {}

// UnsafeChartRendererServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartRendererServer will
// result in compilation errors.
type UnsafeChartRendererServer interface {
	mustEmbedUnimplementedChartRendererServer()
}

func RegisterChartRendererServer(s grpc.ServiceRegistrar, srv ChartRendererServer) {
	s.RegisterService(&ChartRenderer_ServiceDesc, srv)
}

func _ChartRenderer_RenderChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartRendererServer).RenderChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/render.ChartRenderer/RenderChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartRendererServer).RenderChart(ctx, req.(*RenderChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChartRenderer_ServiceDesc is the grpc.ServiceDesc for ChartRenderer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChartRenderer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "render.ChartRenderer",
	HandlerType: (*ChartRendererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderChart",
			Handler:    _ChartRenderer_RenderChart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "renderer_service.proto",
}
