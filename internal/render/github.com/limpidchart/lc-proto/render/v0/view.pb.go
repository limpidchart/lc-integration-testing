// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: view.proto

package render

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChartViewKind contains available view kinds.
type ChartView_ChartViewKind int32

const (
	ChartView_UNSPECIFIED_KIND ChartView_ChartViewKind = 0
	ChartView_AREA             ChartView_ChartViewKind = 1
	ChartView_HORIZONTAL_BAR   ChartView_ChartViewKind = 2
	ChartView_LINE             ChartView_ChartViewKind = 3
	ChartView_SCATTER          ChartView_ChartViewKind = 4
	ChartView_VERTICAL_BAR     ChartView_ChartViewKind = 5
)

// Enum value maps for ChartView_ChartViewKind.
var (
	ChartView_ChartViewKind_name = map[int32]string{
		0: "UNSPECIFIED_KIND",
		1: "AREA",
		2: "HORIZONTAL_BAR",
		3: "LINE",
		4: "SCATTER",
		5: "VERTICAL_BAR",
	}
	ChartView_ChartViewKind_value = map[string]int32{
		"UNSPECIFIED_KIND": 0,
		"AREA":             1,
		"HORIZONTAL_BAR":   2,
		"LINE":             3,
		"SCATTER":          4,
		"VERTICAL_BAR":     5,
	}
)

func (x ChartView_ChartViewKind) Enum() *ChartView_ChartViewKind {
	p := new(ChartView_ChartViewKind)
	*p = x
	return p
}

func (x ChartView_ChartViewKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChartView_ChartViewKind) Descriptor() protoreflect.EnumDescriptor {
	return file_view_proto_enumTypes[0].Descriptor()
}

func (ChartView_ChartViewKind) Type() protoreflect.EnumType {
	return &file_view_proto_enumTypes[0]
}

func (x ChartView_ChartViewKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChartView_ChartViewKind.Descriptor instead.
func (ChartView_ChartViewKind) EnumDescriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0, 0}
}

// ChartViewBarLabelPosition contains available view label positions.
type ChartView_ChartViewBarLabelPosition int32

const (
	ChartView_UNSPECIFIED_BAR_LABEL_POSITION ChartView_ChartViewBarLabelPosition = 0
	ChartView_START_OUTSIDE                  ChartView_ChartViewBarLabelPosition = 1
	ChartView_START_INSIDE                   ChartView_ChartViewBarLabelPosition = 2
	ChartView_CENTER                         ChartView_ChartViewBarLabelPosition = 3
	ChartView_END_INSIDE                     ChartView_ChartViewBarLabelPosition = 4
	ChartView_END_OUTSIDE                    ChartView_ChartViewBarLabelPosition = 5
)

// Enum value maps for ChartView_ChartViewBarLabelPosition.
var (
	ChartView_ChartViewBarLabelPosition_name = map[int32]string{
		0: "UNSPECIFIED_BAR_LABEL_POSITION",
		1: "START_OUTSIDE",
		2: "START_INSIDE",
		3: "CENTER",
		4: "END_INSIDE",
		5: "END_OUTSIDE",
	}
	ChartView_ChartViewBarLabelPosition_value = map[string]int32{
		"UNSPECIFIED_BAR_LABEL_POSITION": 0,
		"START_OUTSIDE":                  1,
		"START_INSIDE":                   2,
		"CENTER":                         3,
		"END_INSIDE":                     4,
		"END_OUTSIDE":                    5,
	}
)

func (x ChartView_ChartViewBarLabelPosition) Enum() *ChartView_ChartViewBarLabelPosition {
	p := new(ChartView_ChartViewBarLabelPosition)
	*p = x
	return p
}

func (x ChartView_ChartViewBarLabelPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChartView_ChartViewBarLabelPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_view_proto_enumTypes[1].Descriptor()
}

func (ChartView_ChartViewBarLabelPosition) Type() protoreflect.EnumType {
	return &file_view_proto_enumTypes[1]
}

func (x ChartView_ChartViewBarLabelPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChartView_ChartViewBarLabelPosition.Descriptor instead.
func (ChartView_ChartViewBarLabelPosition) EnumDescriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0, 1}
}

// ChartViewPointType contains available view point types.
type ChartView_ChartViewPointType int32

const (
	ChartView_UNSPECIFIED_POINT_TYPE ChartView_ChartViewPointType = 0
	ChartView_CIRCLE                 ChartView_ChartViewPointType = 1
	ChartView_SQUARE                 ChartView_ChartViewPointType = 2
	ChartView_X                      ChartView_ChartViewPointType = 3
)

// Enum value maps for ChartView_ChartViewPointType.
var (
	ChartView_ChartViewPointType_name = map[int32]string{
		0: "UNSPECIFIED_POINT_TYPE",
		1: "CIRCLE",
		2: "SQUARE",
		3: "X",
	}
	ChartView_ChartViewPointType_value = map[string]int32{
		"UNSPECIFIED_POINT_TYPE": 0,
		"CIRCLE":                 1,
		"SQUARE":                 2,
		"X":                      3,
	}
)

func (x ChartView_ChartViewPointType) Enum() *ChartView_ChartViewPointType {
	p := new(ChartView_ChartViewPointType)
	*p = x
	return p
}

func (x ChartView_ChartViewPointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChartView_ChartViewPointType) Descriptor() protoreflect.EnumDescriptor {
	return file_view_proto_enumTypes[2].Descriptor()
}

func (ChartView_ChartViewPointType) Type() protoreflect.EnumType {
	return &file_view_proto_enumTypes[2]
}

func (x ChartView_ChartViewPointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChartView_ChartViewPointType.Descriptor instead.
func (ChartView_ChartViewPointType) EnumDescriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0, 2}
}

// ChartViewPointLabelPosition contains available view point label positions.
type ChartView_ChartViewPointLabelPosition int32

const (
	ChartView_UNSPECIFIED_POINT_LABEL_POSITION ChartView_ChartViewPointLabelPosition = 0
	ChartView_TOP                              ChartView_ChartViewPointLabelPosition = 1
	ChartView_TOP_RIGHT                        ChartView_ChartViewPointLabelPosition = 2
	ChartView_TOP_LEFT                         ChartView_ChartViewPointLabelPosition = 3
	ChartView_LEFT                             ChartView_ChartViewPointLabelPosition = 4
	ChartView_RIGHT                            ChartView_ChartViewPointLabelPosition = 5
	ChartView_BOTTOM                           ChartView_ChartViewPointLabelPosition = 6
	ChartView_BOTTOM_LEFT                      ChartView_ChartViewPointLabelPosition = 7
	ChartView_BOTTOM_RIGHT                     ChartView_ChartViewPointLabelPosition = 8
)

// Enum value maps for ChartView_ChartViewPointLabelPosition.
var (
	ChartView_ChartViewPointLabelPosition_name = map[int32]string{
		0: "UNSPECIFIED_POINT_LABEL_POSITION",
		1: "TOP",
		2: "TOP_RIGHT",
		3: "TOP_LEFT",
		4: "LEFT",
		5: "RIGHT",
		6: "BOTTOM",
		7: "BOTTOM_LEFT",
		8: "BOTTOM_RIGHT",
	}
	ChartView_ChartViewPointLabelPosition_value = map[string]int32{
		"UNSPECIFIED_POINT_LABEL_POSITION": 0,
		"TOP":                              1,
		"TOP_RIGHT":                        2,
		"TOP_LEFT":                         3,
		"LEFT":                             4,
		"RIGHT":                            5,
		"BOTTOM":                           6,
		"BOTTOM_LEFT":                      7,
		"BOTTOM_RIGHT":                     8,
	}
)

func (x ChartView_ChartViewPointLabelPosition) Enum() *ChartView_ChartViewPointLabelPosition {
	p := new(ChartView_ChartViewPointLabelPosition)
	*p = x
	return p
}

func (x ChartView_ChartViewPointLabelPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChartView_ChartViewPointLabelPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_view_proto_enumTypes[3].Descriptor()
}

func (ChartView_ChartViewPointLabelPosition) Type() protoreflect.EnumType {
	return &file_view_proto_enumTypes[3]
}

func (x ChartView_ChartViewPointLabelPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChartView_ChartViewPointLabelPosition.Descriptor instead.
func (ChartView_ChartViewPointLabelPosition) EnumDescriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0, 3}
}

// ChartView represents options to configure chart view.
type ChartView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the available view kinds.
	Kind ChartView_ChartViewKind `protobuf:"varint,1,opt,name=kind,proto3,enum=render.ChartView_ChartViewKind" json:"kind,omitempty"`
	// View values with one of available kind of values.
	//
	// Types that are assignable to Values:
	//	*ChartView_ScalarValues
	//	*ChartView_PointsValues
	//	*ChartView_BarsValues
	Values isChartView_Values `protobuf_oneof:"values"`
	// Configured colors for view.
	Colors *ChartViewColors `protobuf:"bytes,5,opt,name=colors,proto3" json:"colors,omitempty"`
	// Set bar label visibility for view with bars.
	BarLabelVisible *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=bar_label_visible,json=barLabelVisible,proto3" json:"bar_label_visible,omitempty"`
	// One of the available bar label positions for view with bars.
	BarLabelPosition ChartView_ChartViewBarLabelPosition `protobuf:"varint,7,opt,name=bar_label_position,json=barLabelPosition,proto3,enum=render.ChartView_ChartViewBarLabelPosition" json:"bar_label_position,omitempty"`
	// Set point visibility for view with points.
	PointVisible *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=point_visible,json=pointVisible,proto3" json:"point_visible,omitempty"`
	// One of the available point types for view with points.
	PointType ChartView_ChartViewPointType `protobuf:"varint,9,opt,name=point_type,json=pointType,proto3,enum=render.ChartView_ChartViewPointType" json:"point_type,omitempty"`
	// Set point label visibility for view with points.
	PointLabelVisible *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=point_label_visible,json=pointLabelVisible,proto3" json:"point_label_visible,omitempty"`
	// One of the available point label positions for view with points.
	PointLabelPosition ChartView_ChartViewPointLabelPosition `protobuf:"varint,11,opt,name=point_label_position,json=pointLabelPosition,proto3,enum=render.ChartView_ChartViewPointLabelPosition" json:"point_label_position,omitempty"`
}

func (x *ChartView) Reset() {
	*x = ChartView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartView) ProtoMessage() {}

func (x *ChartView) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartView.ProtoReflect.Descriptor instead.
func (*ChartView) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0}
}

func (x *ChartView) GetKind() ChartView_ChartViewKind {
	if x != nil {
		return x.Kind
	}
	return ChartView_UNSPECIFIED_KIND
}

func (m *ChartView) GetValues() isChartView_Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (x *ChartView) GetScalarValues() *ChartViewScalarValues {
	if x, ok := x.GetValues().(*ChartView_ScalarValues); ok {
		return x.ScalarValues
	}
	return nil
}

func (x *ChartView) GetPointsValues() *ChartViewPointsValues {
	if x, ok := x.GetValues().(*ChartView_PointsValues); ok {
		return x.PointsValues
	}
	return nil
}

func (x *ChartView) GetBarsValues() *ChartViewBarsValues {
	if x, ok := x.GetValues().(*ChartView_BarsValues); ok {
		return x.BarsValues
	}
	return nil
}

func (x *ChartView) GetColors() *ChartViewColors {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *ChartView) GetBarLabelVisible() *wrapperspb.BoolValue {
	if x != nil {
		return x.BarLabelVisible
	}
	return nil
}

func (x *ChartView) GetBarLabelPosition() ChartView_ChartViewBarLabelPosition {
	if x != nil {
		return x.BarLabelPosition
	}
	return ChartView_UNSPECIFIED_BAR_LABEL_POSITION
}

func (x *ChartView) GetPointVisible() *wrapperspb.BoolValue {
	if x != nil {
		return x.PointVisible
	}
	return nil
}

func (x *ChartView) GetPointType() ChartView_ChartViewPointType {
	if x != nil {
		return x.PointType
	}
	return ChartView_UNSPECIFIED_POINT_TYPE
}

func (x *ChartView) GetPointLabelVisible() *wrapperspb.BoolValue {
	if x != nil {
		return x.PointLabelVisible
	}
	return nil
}

func (x *ChartView) GetPointLabelPosition() ChartView_ChartViewPointLabelPosition {
	if x != nil {
		return x.PointLabelPosition
	}
	return ChartView_UNSPECIFIED_POINT_LABEL_POSITION
}

type isChartView_Values interface {
	isChartView_Values()
}

type ChartView_ScalarValues struct {
	ScalarValues *ChartViewScalarValues `protobuf:"bytes,2,opt,name=scalar_values,json=scalarValues,proto3,oneof"`
}

type ChartView_PointsValues struct {
	PointsValues *ChartViewPointsValues `protobuf:"bytes,3,opt,name=points_values,json=pointsValues,proto3,oneof"`
}

type ChartView_BarsValues struct {
	BarsValues *ChartViewBarsValues `protobuf:"bytes,4,opt,name=bars_values,json=barsValues,proto3,oneof"`
}

func (*ChartView_ScalarValues) isChartView_Values() {}

func (*ChartView_PointsValues) isChartView_Values() {}

func (*ChartView_BarsValues) isChartView_Values() {}

// ChartViewColors represents options to configure view colors.
type ChartViewColors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// View fill color.
	Fill *ChartElementColor `protobuf:"bytes,1,opt,name=fill,proto3" json:"fill,omitempty"`
	// View stroke color.
	Stroke *ChartElementColor `protobuf:"bytes,2,opt,name=stroke,proto3" json:"stroke,omitempty"`
	// View point fill color.
	PointFill *ChartElementColor `protobuf:"bytes,3,opt,name=point_fill,json=pointFill,proto3" json:"point_fill,omitempty"`
	// View point stroke color.
	PointStroke *ChartElementColor `protobuf:"bytes,4,opt,name=point_stroke,json=pointStroke,proto3" json:"point_stroke,omitempty"`
}

func (x *ChartViewColors) Reset() {
	*x = ChartViewColors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartViewColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartViewColors) ProtoMessage() {}

func (x *ChartViewColors) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartViewColors.ProtoReflect.Descriptor instead.
func (*ChartViewColors) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{1}
}

func (x *ChartViewColors) GetFill() *ChartElementColor {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *ChartViewColors) GetStroke() *ChartElementColor {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *ChartViewColors) GetPointFill() *ChartElementColor {
	if x != nil {
		return x.PointFill
	}
	return nil
}

func (x *ChartViewColors) GetPointStroke() *ChartElementColor {
	if x != nil {
		return x.PointStroke
	}
	return nil
}

var File_view_proto protoreflect.FileDescriptor

var file_view_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x1a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x0a, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x61, 0x72, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x72, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x61, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x12,
	0x62, 0x61, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x62, 0x61, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a,
	0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x52, 0x45, 0x41, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x05, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x42, 0x61, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x10, 0x05, 0x22, 0x4f, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x51,
	0x55, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x58, 0x10, 0x03, 0x22, 0xad, 0x01,
	0x0a, 0x1b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x20, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x4f, 0x50, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46,
	0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f,
	0x54, 0x54, 0x4f, 0x4d, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x08, 0x42, 0x08, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6d, 0x70, 0x69, 0x64, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2f,
	0x6c, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2f,
	0x76, 0x30, 0x3b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_view_proto_rawDescOnce sync.Once
	file_view_proto_rawDescData = file_view_proto_rawDesc
)

func file_view_proto_rawDescGZIP() []byte {
	file_view_proto_rawDescOnce.Do(func() {
		file_view_proto_rawDescData = protoimpl.X.CompressGZIP(file_view_proto_rawDescData)
	})
	return file_view_proto_rawDescData
}

var file_view_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_view_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_view_proto_goTypes = []interface{}{
	(ChartView_ChartViewKind)(0),               // 0: render.ChartView.ChartViewKind
	(ChartView_ChartViewBarLabelPosition)(0),   // 1: render.ChartView.ChartViewBarLabelPosition
	(ChartView_ChartViewPointType)(0),          // 2: render.ChartView.ChartViewPointType
	(ChartView_ChartViewPointLabelPosition)(0), // 3: render.ChartView.ChartViewPointLabelPosition
	(*ChartView)(nil),                          // 4: render.ChartView
	(*ChartViewColors)(nil),                    // 5: render.ChartViewColors
	(*ChartViewScalarValues)(nil),              // 6: render.ChartViewScalarValues
	(*ChartViewPointsValues)(nil),              // 7: render.ChartViewPointsValues
	(*ChartViewBarsValues)(nil),                // 8: render.ChartViewBarsValues
	(*wrapperspb.BoolValue)(nil),               // 9: google.protobuf.BoolValue
	(*ChartElementColor)(nil),                  // 10: render.ChartElementColor
}
var file_view_proto_depIdxs = []int32{
	0,  // 0: render.ChartView.kind:type_name -> render.ChartView.ChartViewKind
	6,  // 1: render.ChartView.scalar_values:type_name -> render.ChartViewScalarValues
	7,  // 2: render.ChartView.points_values:type_name -> render.ChartViewPointsValues
	8,  // 3: render.ChartView.bars_values:type_name -> render.ChartViewBarsValues
	5,  // 4: render.ChartView.colors:type_name -> render.ChartViewColors
	9,  // 5: render.ChartView.bar_label_visible:type_name -> google.protobuf.BoolValue
	1,  // 6: render.ChartView.bar_label_position:type_name -> render.ChartView.ChartViewBarLabelPosition
	9,  // 7: render.ChartView.point_visible:type_name -> google.protobuf.BoolValue
	2,  // 8: render.ChartView.point_type:type_name -> render.ChartView.ChartViewPointType
	9,  // 9: render.ChartView.point_label_visible:type_name -> google.protobuf.BoolValue
	3,  // 10: render.ChartView.point_label_position:type_name -> render.ChartView.ChartViewPointLabelPosition
	10, // 11: render.ChartViewColors.fill:type_name -> render.ChartElementColor
	10, // 12: render.ChartViewColors.stroke:type_name -> render.ChartElementColor
	10, // 13: render.ChartViewColors.point_fill:type_name -> render.ChartElementColor
	10, // 14: render.ChartViewColors.point_stroke:type_name -> render.ChartElementColor
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_view_proto_init() }
func file_view_proto_init() {
	if File_view_proto != nil {
		return
	}
	file_color_proto_init()
	file_view_values_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_view_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartViewColors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_view_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ChartView_ScalarValues)(nil),
		(*ChartView_PointsValues)(nil),
		(*ChartView_BarsValues)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_view_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_view_proto_goTypes,
		DependencyIndexes: file_view_proto_depIdxs,
		EnumInfos:         file_view_proto_enumTypes,
		MessageInfos:      file_view_proto_msgTypes,
	}.Build()
	File_view_proto = out.File
	file_view_proto_rawDesc = nil
	file_view_proto_goTypes = nil
	file_view_proto_depIdxs = nil
}
